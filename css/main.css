/* main 영역의 폰트 변경 */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&family=Varela+Round&display=swap');

/* main 요소에 대한 스타일 설정 */
main{
    width: 100%; /* main 요소의 너비를 상위 요소의 전체 너비로 설정 */
    height: 100vh; /* main 요소의 높이를 뷰포트의 높이로 설정 */
    color: white; /* main 요소 내부의 텍스트 색상을 흰색으로 설정 */
    background: linear-gradient(rgba(0,0,0,0.8), rgba(0,0,0,0.8)), url('images/me.jpg') center center; 
    /* 배경 이미지를 'images/me.jpg'로 설정하고, 이미지 위에 검은색의 반투명 그라디언트를 적용. 이미지는 중앙에 위치 */
    background-size: cover; /* 배경 이미지의 크기를 요소의 크기에 맞게 조절 */
    display: flex; /* main 요소 내부의 요소를 flexbox로 배치 */
    justify-content: center; /* main 요소 내부의 요소를 가로축(center)에 중앙에 위치시킴 */
    align-items: center; /* main 요소 내부의 요소를 세로축(center)에 중앙에 위치시킴 */
    text-align: center; /* main 요소 내부의 텍스트를 가운데 정렬 */
}

/* main 요소 내부의 h4 태그에 대한 스타일 설정 */
main h4{
    font-size: 2rem; /* h4 태그의 폰트 크기를 2rem으로 설정 */
}

/* main 요소 내부의 h2 태그에 대한 스타일 설정 */
main h2{
    font-size: 3.5rem; /* h2 태그의 폰트 크기를 3.5rem으로 설정 */
    margin: 2rem 0; /* h2 태그의 상하 여백을 2rem, 좌우 여백을 0으로 설정 */
    letter-spacing: 3px; /* h2 태그의 글자 간격을 3픽셀로 설정 */
    font-family: 'Varela Round', sans-serif; 
    /* h2 태그의 폰트를 'Varela Round'로 설정하고, 해당 폰트를 로드할 수 없는 경우 sans-serif 폰트를 사용 */
}

/* main 요소 내부의 p 태그에 대한 스타일 설정 */
main p{
    max-width: 500px; /* p 태그의 최대 너비를 500픽셀로 설정 */
    margin: 0 auto; /* p 태그의 상하 여백을 0, 좌우 여백을 자동으로 설정하여 가운데 정렬 */
    font-size: 1.25rem; /* p 태그의 폰트 크기를 1.25rem으로 설정 */
}

/* main 요소 내부의 download 클래스를 가진 button에 대한 스타일 설정 */
main button.download{
    background-color: transparent; /* 버튼의 배경색을 투명으로 설정 */
    border: 3px solid white; /* 버튼의 테두리를 3픽셀 두께의 흰색 실선으로 설정 */
    border-radius: 20px; /* 버튼의 테두리 모서리를 둥글게 처리 (반지름 20픽셀) */
    padding: 1rem 2rem; /* 버튼 내부의 상하 여백을 1rem, 좌우 여백을 2rem으로 설정 */
    margin-top: 3rem; /* 버튼의 상단 여백을 3rem으로 설정 */
    color: white; /* 버튼 내부의 텍스트 색상을 흰색으로 설정 */
    font-weight: bold; /* 버튼 내부의 텍스트 두께를 bold로 설정 */
    cursor: pointer; /* 마우스 커서를 버튼 위에 올렸을 때의 모양을 '손가락' 모양으로 설정 */
}

/* main 요소 내부의 mouse 클래스를 가진 button에 대한 스타일 설정 */
main button.mouse{
    background-color: transparent; /* 버튼의 배경색을 투명으로 설정 */
    border: none; /* 버튼의 테두리를 없앰 */
    color: white; 
    font-size: 2rem; 
    position: absolute; 
    bottom: 1rem; 
    left: 50%; /* 버튼의 왼쪽을 상위 요소의 중앙에 위치시킴 */
    transform: translateX(-50%); /* 버튼을 좌우로 -50% 이동시켜 정확히 중앙에 배치 */
    animation: upDown 1s ease-in-out infinite; 
    /* upDown이라는 이름의 애니메이션을 적용. 애니메이션의 지속 시간은 1초, 타이밍 함수는 ease-in-out, 무한 반복 */
    cursor: pointer; /* 마우스 커서를 버튼 위에 올렸을 때의 모양을 '손가락' 모양으로 설정 */
}
  
  /* upDown이라는 이름의 애니메이션 정의 */
@keyframes upDown{
    0%{
      bottom: 1rem; /* 애니메이션 시작 시점에서 버튼의 하단은 상위 요소 하단으로부터 1rem 떨어진 곳에 위치 */
    }
    50%{
      bottom: 1.5rem; /* 애니메이션 중간 시점에서 버튼의 하단은 상위 요소 하단으로부터 1.5rem 떨어진 곳에 위치 */
    }
    100%{
      bottom: 1rem; /* 애니메이션 종료 시점에서 버튼의 하단은 다시 상위 요소 하단으로부터 1rem 떨어진 곳에 위치 */
    }
}

/* main 요소 내부의 h2 태그 안의 span 태그의 가상 요소(::after)에 대한 스타일 설정 */
main h2 span::after{
    content: ""; /* 가상 요소의 내용을 빈 문자열로 설정 */
    height: 40px; /* 가상 요소의 높이를 40픽셀로 설정 */
    width: 3px; /* 가상 요소의 너비를 3픽셀로 설정 */
    background-color: #fff; /* 가상 요소의 배경색을 흰색으로 설정 */
    display: inline-block; /* 가상 요소를 인라인 블록 요소로 표시 */
    animation: blink .7s ease-in-out infinite; /* blink라는 이름의 애니메이션을 적용. 애니메이션의 지속 시간은 0.7초, 타이밍 함수는 ease-in-out, 무한 반복 */
}
  
/* blink라는 이름의 애니메이션 정의 */
@keyframes blink {
    0%{
        opacity: 1; /* 애니메이션 시작 시점에서 가상 요소의 불투명도는 1 */
    }
    100%{
        opacity: 0; /* 애니메이션 종료 시점에서 가상 요소의 불투명도는 0 */
    }
}